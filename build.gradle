/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
  ext.kotlin_version = '1.2.+'
  ext.springBoot_version = '1.5.+'

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBoot_version"
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
  }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
        url 'http://dl.bintray.com/tkob/maven'
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'com.google.appengine:appengine-api-1.0-sdk:+'
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile ("com.sparkjava:spark-core:2.6.0") {
  		exclude group: 'org.eclipse.jetty'
  		exclude group: 'org.eclipse.jetty.websocket'
  	}
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    compile 'com.google.cloud:google-cloud-datastore:1.14.0'
    compile 'yokohama.unit:spring-data-gclouddatastore:0.3.1'
    testCompile  'com.google.appengine:appengine-api-stubs:+'
    testCompile  'com.google.appengine:appengine-testing:+'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
